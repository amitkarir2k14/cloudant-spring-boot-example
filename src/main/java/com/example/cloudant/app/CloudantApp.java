package com.example.cloudant.app;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.web.SpringBootServletInitializer;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
//import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.cloudant.app.entity.Employee;
import com.example.cloudant.app.entity.EmployeeRepository;
import com.example.cloudant.app.error.ApplicationError;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'amit' at '9/6/16 11:48 AM' with Gradle 2.13
 *
 * @author amit, @date 9/6/16 11:48 AM
 */
@SuppressWarnings("deprecation")
@SpringBootApplication
@RestController
@RequestMapping("/employee")
public class CloudantApp extends SpringBootServletInitializer {

	private static Class<CloudantApp> applicationClass = CloudantApp.class;

	public static void main(String[] args) {
		SpringApplication.run(CloudantApp.class, args);
	}

	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(applicationClass);
	}

	@Autowired
	private EmployeeRepository repository;

	@RequestMapping(method = RequestMethod.GET, produces = "application/json")
	public List<Employee> getAll() {
		return repository.getAll();
	}

	@RequestMapping(method = RequestMethod.POST, consumes = "application/json")
	public ResponseEntity<?> create(@RequestBody Employee emp) {
		repository.add(emp);
		return new ResponseEntity<Employee>(emp, HttpStatus.CREATED);
	}

	@RequestMapping(method = RequestMethod.DELETE, value = "{id}")
	public ResponseEntity<?> delete(@PathVariable String id) {
		Employee employee = repository.get(id);
		if (employee == null)
			return new ResponseEntity<ApplicationError>(
					new ApplicationError(HttpStatus.NOT_FOUND.value(), "ID to be deleted not found"), HttpStatus.NOT_FOUND);
		repository.remove(repository.get(id));
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.PUT, value = "{id}", consumes = "application/json")
	public ResponseEntity<?> update(@RequestBody Employee emp, @PathVariable String id) {
		Employee employee = repository.get(id);
		if (employee == null)
			return new ResponseEntity<ApplicationError>(
					new ApplicationError(HttpStatus.NOT_FOUND.value(), "ID to be deleted not found"), HttpStatus.NOT_FOUND);
		employee.setName(emp.getName());
		employee.setBand(emp.getBand());
		repository.update(employee);
		return new ResponseEntity<Employee>(employee, HttpStatus.OK);
	}

}
